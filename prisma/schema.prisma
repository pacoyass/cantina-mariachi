// Prisma schema for Cantina App with enhanced features
// Optimized for cash-on-delivery, delivery-focused restaurant app with admin dashboard support

// GENERATOR & DATASOURCE

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER & AUTH
model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String
  phone     String?
  role      UserRole  @default(CUSTOMER) // Controls dashboard access
  isActive  Boolean   @default(true) // Enable/disable staff accounts
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  refreshTokens   RefreshToken[]
  auditLogs       AuditLog[]
  notifications   Notification[]
  preferences     UserPreference?
  reservations    Reservation[]
  orders          Order[]
  driver          Driver?           @relation("UserToDriver")
  ActivityLog     ActivityLog[]
  LoginLog        LoginLog[]
  NotificationLog NotificationLog[]

  @@index([role])
  @@map("public.users")
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  lastUsedAt DateTime @default(now())
  userAgent  String?
  ip         String?

  @@index([userId])
  @@index([expiresAt])
  @@index([userId, expiresAt])
  @@map("public.refresh_tokens")
}

model BlacklistedToken {
  id        String   @id @default(uuid())
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("public.blacklisted_tokens")
}

// DRIVER
model Driver {
  id                   String            @id @default(uuid())
  userId               String?           @unique // Links to User (optional, for drivers with login)
  user                 User?             @relation("UserToDriver", fields: [userId], references: [id], onDelete: SetNull)
  name                 String
  phone                String
  active               Boolean           @default(true)
  deliveryZone         String? // Zone or area driver covers
  vehicleDetails       String? // Vehicle info for logistics
  currentStatus        String? // e.g., "Available", "On Delivery", "Offline"
  availabilitySchedule Json? // e.g., { "monday": "9AM-5PM" }
  orders               Order[]
  cashTransactions     CashTransaction[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  CashSummary          CashSummary[]

  @@index([active, deliveryZone])
  @@index([currentStatus])
  @@map("public.drivers") // Ensure table name is 'drivers'
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  type      String // e.g., "VIEW_PAGE", "CLICK_BUTTON", "NAVIGATION", "EXPORT"
  message   String
  metadata  Json? // Optional structured data
  createdAt DateTime @default(now())

  @@index([type, createdAt])
  @@map("public.activity_logs")
}

model LoginLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  status    String // "SUCCESS" | "FAILURE"
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([status, createdAt])
  @@map("public.login_logs")
}

model ErrorLog {
  id        String   @id @default(uuid())
  message   String
  stack     String?
  context   Json? // e.g., request details, userId
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@map("public.error_logs")
}

model NotificationLog {
  id           String   @id @default(uuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  type         String // e.g., "EMAIL", "SMS", "PUSH"
  target       String // phone, email, deviceId
  content      String
  status       String // "SENT", "FAILED", "DELIVERED"
  provider     String? // e.g., "Twilio", "SendGrid"
  errorMessage String?
  createdAt    DateTime @default(now())

  @@index([type, status, createdAt])
  @@map("public.notification_logs")
}

model SystemLog {
  id        String   @id @default(uuid())
  source    String // e.g., "cron", "server", "db"
  event     String // e.g., "server_restart", "lock_cleanup", "deployment"
  message   String
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([source, event, createdAt])
  @@map("public.system_logs")
}

// CASH TRANSACTION
model CashTransaction {
  id                String    @id @default(uuid())
  orderId           String    @unique
  driverId          String
  amount            Float // Must match Order.total
  confirmed         Boolean   @default(false)
  adminVerified     Boolean   @default(false) // Admin verification of cash payment
  discrepancyAmount Float? // Amount paid if different from Order.total
  paymentTimestamp  DateTime?
  customerNotes     String? // e.g., "Exact change provided"
  discrepancyNotes  String? // e.g., "Customer paid $20, owed $2"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver Driver @relation(fields: [driverId], references: [id])

  @@index([driverId, createdAt])
  @@index([orderId])
  @@map("public.cash_transactions")
}

// CASH SUMMARY
model CashSummary {
  id               String   @id @default(uuid())
  driverId         String?
  date             DateTime // Date of summary (e.g., 2025-07-30)
  totalAmount      Float // Total cash collected
  unconfirmedCount Int // Number of unconfirmed transactions
  discrepancyTotal Float? // Sum of discrepancies
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  driver Driver? @relation(fields: [driverId], references: [id])

  @@unique([driverId, date])
  @@index([driverId, date])
  @@index([date])
  @@map("public.cash_summary")
}

// APP CONFIG
model AppConfig {
  id             String   @id @default(uuid())
  restaurantName String? // e.g., "Cantina Cafe"
  operatingHours Json? // e.g., { "monday": "9AM-9PM" }
  taxRate        Float? // e.g., 0.08 for 8% tax
  deliveryRadius Float? // e.g., 5.0 miles
  minOrderAmount Float? // e.g., 10.00
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("public.app_config")
}

// AUDIT
model AuditLog {
  id        String    @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  targetId  String?
  details   Json? // e.g., { "transactionId": "uuid", "discrepancy": "Paid $20, owed $2" }
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([action, createdAt])
  @@map("public.audit_logs")
}

// NOTIFICATIONS
model Notification {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  content    String
  read       Boolean  @default(false)
  pushConfig Json? // e.g., { "type": "SMS", "phone": "1234567890" }
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId, read, createdAt])
  @@map("public.notifications")
}

// CRON
model CronLock {
  id         String   @id @default(uuid())
  taskName   String   @unique
  instanceId String
  lockedAt   DateTime

  @@index([lockedAt])
  @@map("public.cron_locks")
}

model CronRun {
  id        String   @id @default(uuid())
  taskName  String
  lastRunAt DateTime
  status    String
  details   Json? // e.g., { "totalCash": 500.00, "unconfirmed": 2 }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskName, lastRunAt])
  @@map("public.cron_runs")
}

// WEBHOOKS
model Webhook {
  id            String       @id @default(uuid())
  url           String
  status        String
  lastSync      DateTime?
  integrationId String?
  integration   Integration? @relation(fields: [integrationId], references: [id], onDelete: SetNull, name: "WebhookToIntegration")
  details       Json
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  logs WebhookLog[] @relation("WebhookToWebhookLogs") // Reverse relation to logs

  @@map("public.webhooks")
}

model WebhookLog {
  id        String   @id @default(uuid())
  webhookId String
  event     String
  payload   Json
  status    String // "SUCCESS" | "FAILED"
  error     String?
  attempts  Int
  createdAt DateTime @default(now())

  webhook Webhook @relation("WebhookToWebhookLogs", fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, status, createdAt])
  @@map("public.webhook_logs")
}

model Integration {
  id        String    @id @default(uuid())
  name      String
  config    Json // e.g., { "apiKey": "key", "provider": "PayPal" }
  webhooks  Webhook[] @relation("WebhookToIntegration")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("public.integrations")
}

// PREFERENCES
model UserPreference {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                  String?
  shortcuts              Json?
  accessibility          Json?
  defaultAddress         String? // Default delivery address for registered users
  preferredContactMethod String? // e.g., "SMS", "Email", "Push"
  deletedAt              DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@map("public.user_preferences")
}

// LOCALIZATION
model Localization {
  id           String    @id @default(uuid())
  language     String
  translations Json
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("public.localizations")
}

// DYNAMIC TRANSLATION MANAGEMENT
model ContentSchema {
  id        String   @id @default(cuid())
  slug      String // Page slug (e.g., 'home', 'about')
  locale    String   @default("en")
  fields    Json // Field definitions and validation rules
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, locale])
  @@map("public.content_schemas")
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique // e.g., 'en', 'de-CH'
  name      String // e.g., 'English', 'Swiss German'
  rtl       Boolean  @default(false)
  fallback  String? // e.g., 'de' for 'de-CH'
  isActive  Boolean  @default(true)
  priority  Int      @default(0) // For fallback ordering
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("public.languages")
}

model Namespace {
  id          String   @id @default(cuid())
  name        String // e.g., 'common', 'home', 'menu'
  locale      String   @default("en")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, locale])
  @@map("public.namespaces")
}

model FallbackRule {
  id           String   @id @default(cuid())
  sourceLocale String // e.g., 'de-CH'
  targetLocale String // e.g., 'de'
  priority     Int      @default(0) // Lower number = higher priority
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([sourceLocale, targetLocale])
  @@map("public.fallback_rules")
}

model PageContent {
  id        String   @id @default(cuid())
  slug      String
  locale    String   @default("en")
  data      Json
  status    String   @default("PUBLISHED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, locale])
  @@map("public.page_contents")
}

// CATEGORY + MENU + ORDER + RESERVATION
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  order       Int     @default(0)

  menuItems MenuItem[]

  @@map("public.categories")
}

model MenuItem {
  id           String  @id @default(cuid())
  name         String
  description  String
  price        Float
  image        String?
  isVegetarian Boolean @default(false)
  isVegan      Boolean @default(false)
  isAvailable  Boolean @default(true)
  isSpecial    Boolean @default(false)
  categoryId   String

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("public.menu_items")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String?
  customerName  String
  customerEmail String
  customerPhone String
  type          OrderType
  status        OrderStatus @default(PENDING)
  subtotal      Float
  tax           Float
  total         Float
  notes         String?

  // Delivery-specific fields
  deliveryAddress      String?
  deliveryInstructions String?
  deliveryTimeEstimate DateTime?
  driverId             String?

  // Dine-in specific fields (for waiters)
  tableNumber String? // Table assignment for DINE_IN orders
  guestCount  Int? // Party size for dine-in

  // Staff assignments (for tracking and accountability)
  cookId    String? // Assigned cook
  waiterId  String? // Assigned waiter
  cashierId String? // Who processed payment

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  trackingCode          String?
  trackingCodeExpiresAt DateTime?

  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  driver          Driver?          @relation(fields: [driverId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]
  cashTransaction CashTransaction?

  @@index([status, createdAt])
  @@index([driverId])
  @@index([customerPhone])
  @@index([userId])
  @@index([createdAt])
  @@index([customerEmail])
  @@index([tableNumber, status]) // For waiter queries
  @@index([cookId, status]) // For cook queries
  @@index([type, status]) // For filtering by order type
  @@map("public.orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  notes      String?

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("public.order_items")
}

model Reservation {
  id            String            @id @default(cuid())
  userId        String?
  customerName  String
  customerEmail String
  customerPhone String
  date          DateTime
  time          String
  partySize     Int
  status        ReservationStatus @default(PENDING)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([date, time, status])
  @@map("public.reservations")
}

// ENUMS
enum OrderType {
  TAKEOUT
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  AWAITING_PAYMENT
  PAYMENT_DISPUTED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SEATED
  COMPLETED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  OWNER
  ADMIN
  COOK
  WAITER
  CASHIER
  DRIVER
}
